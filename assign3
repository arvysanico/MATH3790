{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "coursera": {
      "course_slug": "neural-networks-deep-learning",
      "graded_item_id": "XHpfv",
      "launcher_item_id": "Zh0CU"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "colab": {
      "name": "Copy of Python_ML_functions_Assignment3.ipynb",
      "provenance": []
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "a2d9338fb6304573b47ae72e50e19d45": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_156051b82e4d4bed8b2ae3b0bbce82fe",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_6371809a7ea743c18ed7444407ba613b",
              "IPY_MODEL_2179a06436484edd9135c211c2ee6076",
              "IPY_MODEL_d217a88d379a406d937f2485cad923bc"
            ]
          }
        },
        "156051b82e4d4bed8b2ae3b0bbce82fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6371809a7ea743c18ed7444407ba613b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "state": {
            "_view_name": "IntSliderView",
            "style": "IPY_MODEL_9d071b871bbd4906a421b1bc83008de1",
            "_dom_classes": [],
            "description": "angle1",
            "step": 10,
            "_model_name": "IntSliderModel",
            "orientation": "horizontal",
            "max": 180,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 20,
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "min": -180,
            "continuous_update": true,
            "readout_format": "d",
            "description_tooltip": null,
            "readout": true,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_03408fd19a4a4592a57fd4106190b6d8"
          }
        },
        "2179a06436484edd9135c211c2ee6076": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "state": {
            "_view_name": "IntSliderView",
            "style": "IPY_MODEL_3dbc3e61925748a883488a878dfef274",
            "_dom_classes": [],
            "description": "angle2",
            "step": 10,
            "_model_name": "IntSliderModel",
            "orientation": "horizontal",
            "max": 180,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 50,
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "min": -180,
            "continuous_update": true,
            "readout_format": "d",
            "description_tooltip": null,
            "readout": true,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_27d2119e678d4a44aa8f02dfce328fe7"
          }
        },
        "d217a88d379a406d937f2485cad923bc": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "state": {
            "_view_name": "OutputView",
            "msg_id": "",
            "_dom_classes": [],
            "_model_name": "OutputModel",
            "outputs": [
              {
                "output_type": "display_data",
                "metadata": {
                  "tags": []
                },
                "text/plain": "<Figure size 576x288 with 0 Axes>"
              },
              {
                "output_type": "display_data",
                "metadata": {
                  "tags": []
                },
                "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtQAAAKaCAYAAAAef87sAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzdeXRjZ3k/8O+VLNmSF62WLEtX8jKe\nfSaQZJKUNSEnBdIwLGUrkAwETmlOS9PQ0oYtYQlkQsspHEKhvzaQkLZADgkNtEkJJyUBOsMkzmRm\nMsmM7ZlJxsvYHmuz5UXWdn9/zNyLvMvSvZKu/P2cMyexLd376mq5z330vM8rSJIEIiIiIiIqjqHS\nAyAiIiIi0jMG1EREREREJWBATURERERUAgbUREREREQlYEBNRERERFSCujX+zhYgREREpDah0gMg\nUhMz1EREREREJWBATURERERUAgbUREREREQlYEBNRERERFQCBtRERERERCVgQE1EREREVAIG1ERE\nREREJWBATURERERUAgbUREREREQlYEBNRERERFQCBtRERERERCVgQE1EREREVAIG1EREREREJWBA\nTURERERUAgbUREREREQlYEBNRERERFQCBtRERERERCVgQE1EREREVAIG1EREREREJWBATURERERU\nAgbUREREREQlYEBNRERERFQCBtRERERERCVgQE1EREREVAIG1EREREREJWBATURERERUAgbURERE\nREQlYEBNRERERFQCBtRERERERCVgQE1EREREVAIG1EREREREJWBATURERERUAgbUREREREQlYEBN\nVKDx8XG85jWvwRvf+Ea86U1vwujoaFn2+8wzz+AP/uAP8IY3vAF/8id/gnQ6XZb9VoNKHfPFNvJz\nQEREaxMkSVrt76v+kWgjyWazEAQBBoMB999/P4aHh/G5z31O8/2Ojo7CbrfDYrHg05/+NC677DK8\n+93v1ny/1aBSx3yxjfwcEGlEqPQAiNTEDDVpYmJiAtdddx0cDgduvvlmfPrTn8Y3vvENzfZ3xRVX\n4MUXX9Rs+wBgNBphMFx4yyQSCezYsUPT/cl8Ph8sFgsAwGw2K2PYCCp1zBfbyM8BERGtjWcF0sTd\nd9+Nnp4exGIx3HPPPfjBD36Aj3/845rt72/+5m9wxx13aLZ92ZEjR3DllVfi3nvvxaWXXlrUNn70\n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\nvLwcwcHBuHDhAgAgKCgI58+fb1OXEyLqEPhWFZkV7lATkd60tKseGxuL1NRU+Pr64vvvv0dsbCwA\nICsrC5GRkQAAR0dHrF69GiEhIQgJCUFcXBzDNBERdRjcoSYiIiJj4w41mRXuUBMRERER6YCBmoiI\niIhIBwzUREREREQ6YKAmIiIiItIBAzURERERkQ4YqImIiIiIdMBATURERESkAwZqIiIiIiIdMFAT\nEREREemAgZqIiIiISAcM1EREREREOmCgJiIiIiLSAQM1EREREZEOGKiJiIiIiHTAQE1EREREpAMG\naiIiIiIiHTBQExERERHpgIGaiIiIiEgHDNRERERERDpgoCYiIiIi0gEDNRERERGRDhioiYiIiIh0\nwEBNRERERKQDBmoiIiIiIh0wUBMRERER6YCBmoiIiIhIBwzUREREREQ6YKAmIiIiItIBAzURERER\nkQ4YqImIiIiIdMBATURERESkAwZqIiIiIiIdMFATEREREemAgZqIiIiISAcM1EREREREOmCgJiIi\nIiLSAQM1EREREZEOGKiJiIiIiHTAQE1EREREpAOrh9wvMsoqiIiIiIg6KO5QExERERHpgIGaiIiI\niEgHDNRERERERDpgoCYiIiIi0gEDNRERERGRDhioiYiIiIh08H8XmY+eJ1D1ZQAAAABJRU5ErkJg\ngg==\n",
                "text/plain": "<Figure size 864x864 with 2 Axes>"
              }
            ],
            "_view_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_view_count": null,
            "_view_module_version": "1.0.0",
            "layout": "IPY_MODEL_abea443d8c9344d4b45d0852c1bbbc11",
            "_model_module": "@jupyter-widgets/output"
          }
        },
        "9d071b871bbd4906a421b1bc83008de1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "state": {
            "_view_name": "StyleView",
            "handle_color": null,
            "_model_name": "SliderStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "03408fd19a4a4592a57fd4106190b6d8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "3dbc3e61925748a883488a878dfef274": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "state": {
            "_view_name": "StyleView",
            "handle_color": null,
            "_model_name": "SliderStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "27d2119e678d4a44aa8f02dfce328fe7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pzSkC0Sg-mRA",
        "colab_type": "text"
      },
      "source": [
        "## ML functions: Implementation in Python (Due: 2/28/20 - Friday)\n",
        "\n",
        "- In this third programming assignment, you will be implementing some important functions and algorithms used in machine learning. This assignment will help reinforce the basics of Python\n",
        "\n",
        "**Instructions:**\n",
        "- You will be using Python 3.\n",
        "- Avoid using for-loops and while-loops, unless you are explicitly told to do so.\n",
        "- Do not modify the (# GRADED FUNCTION [function name]) comment in some cells. Your work would not be graded if you change this. Each cell containing that comment should only contain one function.\n",
        "- After coding your function, run the cell right below it to check if your result is correct.\n",
        "\n",
        "**After this assignment you will:**\n",
        "- Understand the concept of \"broadcasting\"\n",
        "- Be able to vectorize code\n",
        "- Be familiar with the 'sigmoid function\"\n",
        "- Be familiar with the gradient descent algorithm  to optimize a function\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g3SxKCII-mRC",
        "colab_type": "text"
      },
      "source": [
        "## Note on completing this assignment ##\n",
        "You only need to write code between the ### START CODE HERE ### and ### END CODE HERE ### comments. After writing your code, you can run the cell by either pressing \"SHIFT\"+\"ENTER\" or by clicking on \"Run Cell\" (denoted by a play symbol) in the upper bar of the notebook. \n",
        "\n",
        "We will often specify \"(≈ X lines of code)\" in the comments to tell you about how much code you need to write. It is just a rough estimate, so don't feel bad if your code is longer or shorter.\n",
        "\n",
        "**Exercise**: Set test to `\"Hello World\"` in the cell below to print \"Hello World\" and run the two cells below."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nhTWy46j-mRD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "### START CODE HERE ### (≈ 1 line of code)\n",
        "test = None\n",
        "### END CODE HERE ###"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X_3EkTDq-mRH",
        "colab_type": "code",
        "outputId": "6074778b-0444-4933-ba37-c72aee1732d7",
        "colab": {}
      },
      "source": [
        "print (\"test: \" + test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test: Hello World\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qbN65Pt3-mRL",
        "colab_type": "text"
      },
      "source": [
        "**Expected output**:\n",
        "test: Hello World"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9bjxsLyW-mRM",
        "colab_type": "text"
      },
      "source": [
        "<font color='blue'>\n",
        "**What you need to remember**:\n",
        "- Run your cells using SHIFT+ENTER (or \"Run cell\")\n",
        "- Write code in the designated areas using Python 3 only\n",
        "- Do not modify the code outside of the designated areas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h0MYGAzt-mRN",
        "colab_type": "text"
      },
      "source": [
        "## 1 - Building basic functions with numpy ##\n",
        "\n",
        "Numpy is the main package for scientific computing in Python. It is maintained by a large community (www.numpy.org). In this exercise you will learn several key numpy functions such as np.exp, np.log, and np.reshape. You will need to know how to use these functions for future assignments.\n",
        "\n",
        "### 1.1 - sigmoid function, np.exp() ###\n",
        "\n",
        "Before using np.exp(), you will use math.exp() to implement the sigmoid function. You will then see why np.exp() is preferable to math.exp().\n",
        "\n",
        "#### <font color=blue> **Exercise 1**: </font> Build a function that returns the sigmoid of a real number x. Use math.exp(x) for the exponential function.\n",
        "\n",
        "**Reminder**:\n",
        "$sigmoid(x) = \\frac{1}{1+e^{-x}}$ is sometimes also known as the logistic function. It is a non-linear function used not only in Machine Learning (Logistic Regression), but also in Deep Learning.\n",
        "\n",
        "<img src=\"Sigmoid.png\" style=\"width:500px;height:400px;\">\n",
        "\n",
        "To refer to a function belonging to a specific package you could call it using package_name.function(). Run the code below to see an example with math.exp()."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UmaCeUkz-mRO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: basic_sigmoid\n",
        "\n",
        "import math\n",
        "\n",
        "def basic_sigmoid(x):\n",
        "    \"\"\"\n",
        "    Compute sigmoid of x.\n",
        "\n",
        "    Arguments:\n",
        "    x -- A scalar\n",
        "\n",
        "    Return:\n",
        "    s -- sigmoid(x)\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 1 line of code)\n",
        "    s = 1/(1+math.exp(-x))\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return s"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WD2VQOjv-mRT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d9191027-902d-4007-b0a7-adde9fad87e5"
      },
      "source": [
        "basic_sigmoid(3)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9525741268224334"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U14AVr2y-mRX",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**: \n",
        "<table style = \"width:40%\">\n",
        "    <tr>\n",
        "    <td>** basic_sigmoid(3) **</td> \n",
        "        <td>0.9525741268224334 </td> \n",
        "    </tr>\n",
        "\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N3lzpVrm-mRf",
        "colab_type": "text"
      },
      "source": [
        "Actually, we rarely use the \"math\" library in deep learning because the inputs of the functions are real numbers. In deep learning we mostly use matrices and vectors. This is why numpy is more useful. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yXogkueZ-mRg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "### One reason why we use \"numpy\" instead of \"math\" in Deep Learning ###\n",
        "x = [1, 2, 3]\n",
        "basic_sigmoid(x) # you will see this give an error when you run it, because x is a vector."
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mLXwExUD-mR0",
        "colab_type": "text"
      },
      "source": [
        "In fact, if $ x = (x_1, x_2, ..., x_n)$ is a row vector then $np.exp(x)$ will apply the exponential function to every element of x. The output will thus be: $np.exp(x) = (e^{x_1}, e^{x_2}, ..., e^{x_n})$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r7Zb-erM-mR1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "# example of np.exp\n",
        "x = np.array([1, 2, 3])\n",
        "print(np.exp(x)) # result is (exp(1), exp(2), exp(3))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mUmb3tCv-mR7",
        "colab_type": "text"
      },
      "source": [
        "Furthermore, if x is a vector, then a Python operation such as $s = x + 3$ or $s = \\frac{1}{x}$ will output s as a vector of the same size as x."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gVuAnNzv-mR8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# example of vector operation\n",
        "x = np.array([1, 2, 3])\n",
        "print (x + 3)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "521txtpJ-mR-",
        "colab_type": "text"
      },
      "source": [
        "Any time you need more info on a numpy function, we encourage you to look at [the official documentation](https://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.exp.html). \n",
        "\n",
        "You can also create a new cell in the notebook and write `np.exp?` (for example) to get quick access to the documentation.\n",
        "\n",
        "#### <font color=blue> **Exercise 2**: </font> Now implement the sigmoid function using numpy. \n",
        "\n",
        "**Instructions**: x could now be either a real number, a vector, or a matrix. The data structures we use in numpy to represent these shapes (vectors, matrices...) are called numpy arrays. You don't need to know more for now.\n",
        "$$ \\text{For } x \\in \\mathbb{R}^n \\text{,     } sigmoid(x) = sigmoid(\\begin{pmatrix}\n",
        "    x_1  \\\\\n",
        "    x_2  \\\\\n",
        "    ...  \\\\\n",
        "    x_n  \\\\\n",
        "\\end{pmatrix}) = \\begin{pmatrix}\n",
        "    \\frac{1}{1+e^{-x_1}}  \\\\\n",
        "    \\frac{1}{1+e^{-x_2}}  \\\\\n",
        "    ...  \\\\\n",
        "    \\frac{1}{1+e^{-x_n}}  \\\\\n",
        "\\end{pmatrix}\\tag{1} $$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "28i7mtxJ-mR_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: sigmoid\n",
        "\n",
        "import numpy as np # this means you can access numpy functions by writing np.function() instead of numpy.function()\n",
        "\n",
        "def sigmoid(x):\n",
        "    \"\"\"\n",
        "    Compute the sigmoid of x\n",
        "\n",
        "    Arguments:\n",
        "    x -- A scalar or numpy array of any size\n",
        "\n",
        "    Return:\n",
        "    s -- sigmoid(x)\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 1 line of code)\n",
        "    s = 1/(1+np.exp(-x))\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return s"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uH8wgAzY-mSC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a1ec1591-09c9-446b-b92f-ea4d1de75691"
      },
      "source": [
        "x = np.array([1, 2, 3])\n",
        "sigmoid(x)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.73105858, 0.88079708, 0.95257413])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tXKnKGhB-mSE",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**: \n",
        "<table>\n",
        "    <tr> \n",
        "        <td> **sigmoid([1,2,3])**</td> \n",
        "        <td> array([ 0.73105858,  0.88079708,  0.95257413]) </td> \n",
        "    </tr>\n",
        "</table> \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NcwM_Voy-mSF",
        "colab_type": "text"
      },
      "source": [
        "### 1.2 - Sigmoid gradient\n",
        "\n",
        "As you've seen in lecture, you will need to compute gradients to optimize loss functions using backpropagation. Let's code your first gradient function.\n",
        "\n",
        "#### <font color=blue> **Exercise 3**: </font> Implement the function sigmoid_grad() to compute the gradient of the sigmoid function with respect to its input x. The formula is: $$sigmoid\\_derivative(x) = \\sigma'(x) = \\sigma(x) (1 - \\sigma(x))\\tag{2}$$\n",
        "You often code this function in two steps:\n",
        "1. Set s to be the sigmoid of x. You might find your sigmoid(x) function useful.\n",
        "2. Compute $\\sigma'(x) = s(1-s)$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mr5P5SEN-mSG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: sigmoid_derivative\n",
        "\n",
        "def sigmoid_derivative(x):\n",
        "    \"\"\"\n",
        "    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.\n",
        "    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.\n",
        "    \n",
        "    Arguments:\n",
        "    x -- A scalar or numpy array\n",
        "\n",
        "    Return:\n",
        "    ds -- Your computed gradient.\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 2 lines of code)\n",
        "    s = 1/(1+np.exp(-x))\n",
        "    ds = s*(1-s)\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return ds"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pwvX9d_Y-mSJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "11ede0f2-0211-4698-f44d-38170b65c500"
      },
      "source": [
        "x = np.array([1, 2, 3])\n",
        "print (\"sigmoid_derivative(x) = \" + str(sigmoid_derivative(x)))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sigmoid_derivative(x) = [0.19661193 0.10499359 0.04517666]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mo3d_alv-mSO",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**: \n",
        "\n",
        "\n",
        "<table>\n",
        "    <tr> \n",
        "        <td> **sigmoid_derivative([1,2,3])**</td> \n",
        "        <td> [ 0.19661193  0.10499359  0.04517666] </td> \n",
        "    </tr>\n",
        "</table> \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ObhwtlCj-mSO",
        "colab_type": "text"
      },
      "source": [
        "### 1.3 - Reshaping arrays ###\n",
        "\n",
        "Two common numpy functions used in deep learning are [np.shape](https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html) and [np.reshape()](https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html). \n",
        "- X.shape is used to get the shape (dimension) of a matrix/vector X. \n",
        "- X.reshape(...) is used to reshape X into some other dimension. \n",
        "\n",
        "For example, in computers, an image is typically stored as a 3D array of shape $(length, height, depth = 3)$. However, when you read an image as the input of an algorithm you convert it to a vector of shape $(length*height*3, 1)$. In other words, you \"unroll\", or reshape, the 3D array into a 1D vector.\n",
        "\n",
        "<img src=\"image2vector_kiank.png\" style=\"width:500px;height:300;\">\n",
        "\n",
        "#### <font color=blue> **Exercise 4**: </font> Implement `image2vector()` that takes an input of shape (length, height, 3) and returns a vector of shape (length\\*height\\*3, 1). For example, if you would like to reshape an array v of shape (a, b, c) into a vector of shape (a*b,c) you would do:\n",
        "``` python\n",
        "v = v.reshape((v.shape[0]*v.shape[1], v.shape[2])) # v.shape[0] = a ; v.shape[1] = b ; v.shape[2] = c\n",
        "```\n",
        "- Please don't hardcode the dimensions of image as a constant. Instead look up the quantities you need with `image.shape[0]`, etc. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fTw9v7M_-mSP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: image2vector\n",
        "def image2vector(image):\n",
        "    \"\"\"\n",
        "    Argument:\n",
        "    image -- a numpy array of shape (length, height, depth)\n",
        "    \n",
        "    Returns:\n",
        "    v -- a vector of shape (length*height*depth, 1)\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 1 line of code)\n",
        "    v = image.reshape((image.shape[0]*image.shape[1], image.shape[2]))\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return v"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3ObxfzJL-mST",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "d70d08b2-963e-4910-cb85-f0912c4563d8"
      },
      "source": [
        "# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\n",
        "image = np.array([[[ 0.67826139,  0.29380381],\n",
        "        [ 0.90714982,  0.52835647],\n",
        "        [ 0.4215251 ,  0.45017551]],\n",
        "\n",
        "       [[ 0.92814219,  0.96677647],\n",
        "        [ 0.85304703,  0.52351845],\n",
        "        [ 0.19981397,  0.27417313]],\n",
        "\n",
        "       [[ 0.60659855,  0.00533165],\n",
        "        [ 0.10820313,  0.49978937],\n",
        "        [ 0.34144279,  0.94630077]]])\n",
        "\n",
        "print (\"image2vector(image) = \" + str(image2vector(image)))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "image2vector(image) = [[0.67826139 0.29380381]\n",
            " [0.90714982 0.52835647]\n",
            " [0.4215251  0.45017551]\n",
            " [0.92814219 0.96677647]\n",
            " [0.85304703 0.52351845]\n",
            " [0.19981397 0.27417313]\n",
            " [0.60659855 0.00533165]\n",
            " [0.10820313 0.49978937]\n",
            " [0.34144279 0.94630077]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BQqeo1Mi-mSW",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**: \n",
        "\n",
        "\n",
        "<table style=\"width:100%\">\n",
        "     <tr> \n",
        "       <td> **image2vector(image)** </td> \n",
        "       <td> [[ 0.67826139]\n",
        " [ 0.29380381]\n",
        " [ 0.90714982]\n",
        " [ 0.52835647]\n",
        " [ 0.4215251 ]\n",
        " [ 0.45017551]\n",
        " [ 0.92814219]\n",
        " [ 0.96677647]\n",
        " [ 0.85304703]\n",
        " [ 0.52351845]\n",
        " [ 0.19981397]\n",
        " [ 0.27417313]\n",
        " [ 0.60659855]\n",
        " [ 0.00533165]\n",
        " [ 0.10820313]\n",
        " [ 0.49978937]\n",
        " [ 0.34144279]\n",
        " [ 0.94630077]]</td> \n",
        "     </tr>\n",
        "    \n",
        "   \n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uEHqAFBo-mSX",
        "colab_type": "text"
      },
      "source": [
        "### 1.4 - Normalizing rows\n",
        "\n",
        "Another common technique we use in Machine Learning and Deep Learning is to normalize our data. It often leads to a better performance because gradient descent converges faster after normalization. Here, by normalization we mean changing x to $ \\frac{x}{\\| x\\|} $ (dividing each row vector of x by its norm).\n",
        "\n",
        "For example, if $$x = \n",
        "\\begin{bmatrix}\n",
        "    0 & 3 & 4 \\\\\n",
        "    2 & 6 & 4 \\\\\n",
        "\\end{bmatrix}\\tag{3}$$ then $$\\| x\\| = np.linalg.norm(x, axis = 1, keepdims = True) = \\begin{bmatrix}\n",
        "    5 \\\\\n",
        "    \\sqrt{56} \\\\\n",
        "\\end{bmatrix}\\tag{4} $$and        $$ x\\_normalized = \\frac{x}{\\| x\\|} = \\begin{bmatrix}\n",
        "    0 & \\frac{3}{5} & \\frac{4}{5} \\\\\n",
        "    \\frac{2}{\\sqrt{56}} & \\frac{6}{\\sqrt{56}} & \\frac{4}{\\sqrt{56}} \\\\\n",
        "\\end{bmatrix}\\tag{5}$$ Note that you can divide matrices of different sizes and it works fine: this is called broadcasting and you're going to learn about it in part 5.\n",
        "\n",
        "\n",
        "#### <font color=blue> **Exercise 5**: </font> Implement normalizeRows() to normalize the rows of a matrix. After applying this function to an input matrix x, each row of x should be a vector of unit length (meaning length 1)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "epE6m_PM-mSY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: normalizeRows\n",
        "\n",
        "def normalizeRows(x):\n",
        "    \"\"\"\n",
        "    Implement a function that normalizes each row of the matrix x (to have unit length).\n",
        "    \n",
        "    Argument:\n",
        "    x -- A numpy matrix of shape (n, m)\n",
        "    \n",
        "    Returns:\n",
        "    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 2 lines of code)\n",
        "    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n",
        "    x_norm =  np.linalg.norm(x,ord = 2,axis = 1,keepdims = True)\n",
        "    \n",
        "    # Divide x by its norm.\n",
        "    x =  x / x_norm\n",
        "    ### END CODE HERE ###\n",
        "\n",
        "    return x"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zomKukP1-mSb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "d6fedfc1-6116-4193-b7d9-387a98c62700"
      },
      "source": [
        "x = np.array([\n",
        "    [0, 3, 4],\n",
        "    [1, 6, 4]])\n",
        "print(\"normalizeRows(x) = \" + str(normalizeRows(x)))"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "normalizeRows(x) = [[0.         0.6        0.8       ]\n",
            " [0.13736056 0.82416338 0.54944226]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fruek9SA-mSe",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**: \n",
        "\n",
        "<table style=\"width:60%\">\n",
        "\n",
        "     <tr> \n",
        "       <td> **normalizeRows(x)** </td> \n",
        "       <td> [[ 0.          0.6         0.8       ]\n",
        " [ 0.13736056  0.82416338  0.54944226]]</td> \n",
        "     </tr>\n",
        "    \n",
        "   \n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W5xOa2MA-mSf",
        "colab_type": "text"
      },
      "source": [
        "**Note**:\n",
        "In normalizeRows(), you can try to print the shapes of x_norm and x, and then rerun the assessment. You'll find out that they have different shapes. This is normal given that x_norm takes the norm of each row of x. So x_norm has the same number of rows but only 1 column. So how did it work when you divided x by x_norm? This is called broadcasting and we'll talk about it now! "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FZZ1tutE-mSf",
        "colab_type": "text"
      },
      "source": [
        "### 1.5 - Broadcasting and the softmax function ####\n",
        "A very important concept to understand in numpy is \"broadcasting\". It is very useful for performing mathematical operations between arrays of different shapes. For the full details on broadcasting, you can read the official [broadcasting documentation](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N-IZggY6-mSh",
        "colab_type": "text"
      },
      "source": [
        "#### <font color=blue> **Exercise 6**: </font> Implement a softmax function using numpy. You can think of softmax as a normalizing function used when your algorithm needs to classify two or more classes. You will learn more about softmax in the second course of this specialization.\n",
        "\n",
        "**Instructions**:\n",
        "- $ \\text{for } x \\in \\mathbb{R}^{1\\times n} \\text{,     } softmax(x) = softmax(\\begin{bmatrix}\n",
        "    x_1  &&\n",
        "    x_2 &&\n",
        "    ...  &&\n",
        "    x_n  \n",
        "\\end{bmatrix}) = \\begin{bmatrix}\n",
        "     \\frac{e^{x_1}}{\\sum_{j}e^{x_j}}  &&\n",
        "    \\frac{e^{x_2}}{\\sum_{j}e^{x_j}}  &&\n",
        "    ...  &&\n",
        "    \\frac{e^{x_n}}{\\sum_{j}e^{x_j}} \n",
        "\\end{bmatrix} $ \n",
        "\n",
        "- $\\text{for a matrix } x \\in \\mathbb{R}^{m \\times n} \\text{,  $x_{ij}$ maps to the element in the $i^{th}$ row and $j^{th}$ column of $x$, thus we have: }$  $$softmax(x) = softmax\\begin{bmatrix}\n",
        "    x_{11} & x_{12} & x_{13} & \\dots  & x_{1n} \\\\\n",
        "    x_{21} & x_{22} & x_{23} & \\dots  & x_{2n} \\\\\n",
        "    \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
        "    x_{m1} & x_{m2} & x_{m3} & \\dots  & x_{mn}\n",
        "\\end{bmatrix} = \\begin{bmatrix}\n",
        "    \\frac{e^{x_{11}}}{\\sum_{j}e^{x_{1j}}} & \\frac{e^{x_{12}}}{\\sum_{j}e^{x_{1j}}} & \\frac{e^{x_{13}}}{\\sum_{j}e^{x_{1j}}} & \\dots  & \\frac{e^{x_{1n}}}{\\sum_{j}e^{x_{1j}}} \\\\\n",
        "    \\frac{e^{x_{21}}}{\\sum_{j}e^{x_{2j}}} & \\frac{e^{x_{22}}}{\\sum_{j}e^{x_{2j}}} & \\frac{e^{x_{23}}}{\\sum_{j}e^{x_{2j}}} & \\dots  & \\frac{e^{x_{2n}}}{\\sum_{j}e^{x_{2j}}} \\\\\n",
        "    \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
        "    \\frac{e^{x_{m1}}}{\\sum_{j}e^{x_{mj}}} & \\frac{e^{x_{m2}}}{\\sum_{j}e^{x_{mj}}} & \\frac{e^{x_{m3}}}{\\sum_{j}e^{x_{mj}}} & \\dots  & \\frac{e^{x_{mn}}}{\\sum_{j}e^{x_{mj}}}\n",
        "\\end{bmatrix} = \\begin{pmatrix}\n",
        "    softmax\\text{(first row of x)}  \\\\\n",
        "    softmax\\text{(second row of x)} \\\\\n",
        "    ...  \\\\\n",
        "    softmax\\text{(last row of x)} \\\\\n",
        "\\end{pmatrix} $$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gEomWNqR-mSi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: softmax\n",
        "\n",
        "def softmax(x):\n",
        "    \"\"\"Calculates the softmax for each row of the input x.\n",
        "\n",
        "    Your code should work for a row vector and also for matrices of shape (n, m).\n",
        "\n",
        "    Argument:\n",
        "    x -- A numpy matrix of shape (n,m)\n",
        "\n",
        "    Returns:\n",
        "    s -- A numpy matrix equal to the softmax of x, of shape (n,m)\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 3 lines of code)\n",
        "    # Apply exp() element-wise to x. Use np.exp(...).\n",
        "    x_exp = np.exp(x)\n",
        "\n",
        "    # Create a vector x_sum that sums each row of x_exp. Use np.sum(..., axis = 1, keepdims = True).\n",
        "    x_sum = np.sum(x_exp,axis = 1,keepdims = True)\n",
        "    \n",
        "    # Compute softmax(x) by dividing x_exp by x_sum. It should automatically use numpy broadcasting.\n",
        "    s = x_exp / x_sum\n",
        "\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return s"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GmgMHlnX-mSk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "9c266b52-81dc-4f33-9aa8-7f7796d339ee"
      },
      "source": [
        "x = np.array([\n",
        "    [9, 2, 5, 0, 0],\n",
        "    [7, 5, 0, 0 ,0]])\n",
        "print(\"softmax(x) = \" + str(softmax(x)))"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "softmax(x) = [[9.80897665e-01 8.94462891e-04 1.79657674e-02 1.21052389e-04\n",
            "  1.21052389e-04]\n",
            " [8.78679856e-01 1.18916387e-01 8.01252314e-04 8.01252314e-04\n",
            "  8.01252314e-04]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o08hWwMk-mSm",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**:\n",
        "\n",
        "<table style=\"width:60%\">\n",
        "\n",
        "     <tr> \n",
        "       <td> **softmax(x)** </td> \n",
        "       <td> [[  9.80897665e-01   8.94462891e-04   1.79657674e-02   1.21052389e-04\n",
        "    1.21052389e-04]\n",
        " [  8.78679856e-01   1.18916387e-01   8.01252314e-04   8.01252314e-04\n",
        "    8.01252314e-04]]</td> \n",
        "     </tr>\n",
        "</table>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3lOsALlU-mSn",
        "colab_type": "text"
      },
      "source": [
        "**Note**:\n",
        "- If you print the shapes of x_exp, x_sum and s above and rerun the assessment cell, you will see that x_sum is of shape (2,1) while x_exp and s are of shape (2,5). **x_exp/x_sum** works due to python broadcasting.\n",
        "\n",
        "Congratulations! You now have a pretty good understanding of python numpy and have implemented a few useful functions that you will be using in deep learning."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9bYl3tCM-mSo",
        "colab_type": "text"
      },
      "source": [
        "<font color='blue'>\n",
        "**What you need to remember:**\n",
        "- np.exp(x) works for any np.array x and applies the exponential function to every coordinate\n",
        "- the sigmoid function and its gradient\n",
        "- image2vector is commonly used in deep learning\n",
        "- np.reshape is widely used. In the future, you'll see that keeping your matrix/vector dimensions straight will go toward eliminating a lot of bugs. \n",
        "- numpy has efficient built-in functions\n",
        "- broadcasting is extremely useful"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "rFnVioff-mSt",
        "colab_type": "text"
      },
      "source": [
        "## 2) Vectorization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LAECw70R-mSu",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "In deep learning, you deal with very large datasets. Hence, a non-computationally-optimal function can become a huge bottleneck in your algorithm and can result in a model that takes ages to run. To make sure that your code is  computationally efficient, you will use vectorization. For example, try to tell the difference between the following implementations of the dot/outer/elementwise product."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZHux9JHn-mSu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import time\n",
        "\n",
        "x1 = [9, 2, 5, 0, 0, 7, 5, 0, 0, 0, 9, 2, 5, 0, 0]\n",
        "x2 = [9, 2, 2, 9, 0, 9, 2, 5, 0, 0, 9, 2, 5, 0, 0]\n",
        "\n",
        "### CLASSIC DOT PRODUCT OF VECTORS IMPLEMENTATION ###\n",
        "tic = time.process_time()\n",
        "dot = 0\n",
        "for i in range(len(x1)):\n",
        "    dot+= x1[i]*x2[i]\n",
        "toc = time.process_time()\n",
        "print (\"dot = \" + str(dot) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n",
        "\n",
        "### CLASSIC OUTER PRODUCT IMPLEMENTATION ###\n",
        "tic = time.process_time()\n",
        "outer = np.zeros((len(x1),len(x2))) # we create a len(x1)*len(x2) matrix with only zeros\n",
        "for i in range(len(x1)):\n",
        "    for j in range(len(x2)):\n",
        "        outer[i,j] = x1[i]*x2[j]\n",
        "toc = time.process_time()\n",
        "print (\"outer = \" + str(outer) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n",
        "\n",
        "### CLASSIC ELEMENTWISE IMPLEMENTATION ###\n",
        "tic = time.process_time()\n",
        "mul = np.zeros(len(x1))\n",
        "for i in range(len(x1)):\n",
        "    mul[i] = x1[i]*x2[i]\n",
        "toc = time.process_time()\n",
        "print (\"elementwise multiplication = \" + str(mul) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n",
        "\n",
        "### CLASSIC GENERAL DOT PRODUCT IMPLEMENTATION ###\n",
        "W = np.random.rand(3,len(x1)) # Random 3*len(x1) numpy array\n",
        "tic = time.process_time()\n",
        "gdot = np.zeros(W.shape[0])\n",
        "for i in range(W.shape[0]):\n",
        "    for j in range(len(x1)):\n",
        "        gdot[i] += W[i,j]*x1[j]\n",
        "toc = time.process_time()\n",
        "print (\"gdot = \" + str(gdot) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a4IiMyFT-mS6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x1 = [9, 2, 5, 0, 0, 7, 5, 0, 0, 0, 9, 2, 5, 0, 0]\n",
        "x2 = [9, 2, 2, 9, 0, 9, 2, 5, 0, 0, 9, 2, 5, 0, 0]\n",
        "\n",
        "### VECTORIZED DOT PRODUCT OF VECTORS ###\n",
        "tic = time.process_time()\n",
        "dot = np.dot(x1,x2)\n",
        "toc = time.process_time()\n",
        "print (\"dot = \" + str(dot) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n",
        "\n",
        "### VECTORIZED OUTER PRODUCT ###\n",
        "tic = time.process_time()\n",
        "outer = np.outer(x1,x2)\n",
        "toc = time.process_time()\n",
        "print (\"outer = \" + str(outer) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n",
        "\n",
        "### VECTORIZED ELEMENTWISE MULTIPLICATION ###\n",
        "tic = time.process_time()\n",
        "mul = np.multiply(x1,x2)\n",
        "toc = time.process_time()\n",
        "print (\"elementwise multiplication = \" + str(mul) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n",
        "\n",
        "### VECTORIZED GENERAL DOT PRODUCT ###\n",
        "tic = time.process_time()\n",
        "dot = np.dot(W,x1)\n",
        "toc = time.process_time()\n",
        "print (\"gdot = \" + str(dot) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "djsJuJDC-mS8",
        "colab_type": "text"
      },
      "source": [
        "As you may have noticed, the vectorized implementation is much cleaner and more efficient. For bigger vectors/matrices, the differences in running time become even bigger. \n",
        "\n",
        "**Note** that `np.dot()` performs a matrix-matrix or matrix-vector multiplication. This is different from `np.multiply()` and the `*` operator (which is equivalent to  `.*` in Matlab/Octave), which performs an element-wise multiplication."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9bGW-SWY-mTA",
        "colab_type": "text"
      },
      "source": [
        "### 2.1 Implement the L1 and L2 loss functions\n",
        "\n",
        "#### <font color=blue> **Exercise 7**: </font> Implement the numpy vectorized version of the L1 loss. You may find the function abs(x) (absolute value of x) useful.\n",
        "\n",
        "**Reminder**:\n",
        "- The loss is used to evaluate the performance of your model. The bigger your loss is, the more different your predictions ($ \\hat{y} $) are from the true values ($y$). In deep learning, you use optimization algorithms like Gradient Descent to train your model and to minimize the cost.\n",
        "- L1 loss is defined as:\n",
        "$$\\begin{align*} & L_1(\\hat{y}, y) = \\sum_{i=0}^m|y^{(i)} - \\hat{y}^{(i)}| \\end{align*}\\tag{6}$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JnqqAeEV-mTN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: L1\n",
        "\n",
        "def L1(yhat, y):\n",
        "    \"\"\"\n",
        "    Arguments:\n",
        "    yhat -- vector of size m (predicted labels)\n",
        "    y -- vector of size m (true labels)\n",
        "    \n",
        "    Returns:\n",
        "    loss -- the value of the L1 loss function defined above\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 1 line of code)\n",
        "    loss = np.sum(np.abs(yhat-y),axis = 0)\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return loss"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X-MKbQSg-mTU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "929ee50c-d080-4eb2-f39f-e4ebdca8ed10"
      },
      "source": [
        "yhat = np.array([.9, 0.2, 0.1, .4, .9])\n",
        "y = np.array([1, 0, 0, 1, 1])\n",
        "print(\"L1 = \" + str(L1(yhat,y)))"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "L1 = 1.1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Az-yWP2L-mTw",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**:\n",
        "\n",
        "<table style=\"width:20%\">\n",
        "\n",
        "     <tr> \n",
        "       <td> **L1** </td> \n",
        "       <td> 1.1 </td> \n",
        "     </tr>\n",
        "</table>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SNIrkUf1-mTx",
        "colab_type": "text"
      },
      "source": [
        "#### <font color=blue> **Exercise 8**: </font> Implement the numpy vectorized version of the L2 loss. There are several way of implementing the L2 loss but you may find the function np.dot() useful. As a reminder, if $x = [x_1, x_2, ..., x_n]$, then `np.dot(x,x)` = $\\sum_{j=0}^n x_j^{2}$. \n",
        "\n",
        "- L2 loss is defined as $$\\begin{align*} & L_2(\\hat{y},y) = \\sum_{i=0}^m(y^{(i)} - \\hat{y}^{(i)})^2 \\end{align*}\\tag{7}$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uCzS8umR-mTz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# GRADED FUNCTION: L2\n",
        "\n",
        "def L2(yhat, y):\n",
        "    \"\"\"\n",
        "    Arguments:\n",
        "    yhat -- vector of size m (predicted labels)\n",
        "    y -- vector of size m (true labels)\n",
        "    \n",
        "    Returns:\n",
        "    loss -- the value of the L2 loss function defined above\n",
        "    \"\"\"\n",
        "    \n",
        "    ### START CODE HERE ### (≈ 1 line of code)\n",
        "    loss = np.dot(np.abs(yhat-y),np.abs(yhat-y))\n",
        "    ### END CODE HERE ###\n",
        "    \n",
        "    return loss"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y40sbU6n-mT1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8cdf8e0e-3e6e-4968-9740-abb6e2c76bb8"
      },
      "source": [
        "yhat = np.array([.9, 0.2, 0.1, .4, .9])\n",
        "y = np.array([1, 0, 0, 1, 1])\n",
        "print(\"L2 = \" + str(L2(yhat,y)))"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "L2 = 0.43\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HfWXyZYx-mT6",
        "colab_type": "text"
      },
      "source": [
        "**Expected Output**: \n",
        "<table style=\"width:20%\">\n",
        "     <tr> \n",
        "       <td> **L2** </td> \n",
        "       <td> 0.43 </td> \n",
        "     </tr>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WSi87N1c-mT6",
        "colab_type": "text"
      },
      "source": [
        "Congratulations on completing this assignment. We hope that this little warm-up exercise helps you in the future assignments, which will be more exciting and interesting!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kKY-0M1k-mT7",
        "colab_type": "text"
      },
      "source": [
        "<font color='green'>\n",
        "**What to remember:**\n",
        "- Vectorization is very important in deep learning. It provides computational efficiency and clarity.\n",
        "- You have reviewed the L1 and L2 loss.\n",
        "- You are familiar with many numpy functions such as np.sum, np.dot, np.multiply, np.maximum, etc..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "96-mA7Bu-mT8",
        "colab_type": "text"
      },
      "source": [
        "#### <font color=blue> **Exercise 9**: </font>   $$f(x,y) = x^3 - 6x^2 + 12x + y^3 + 9y^2 + 27y +19$$  \n",
        "\n",
        "- Generate a graph of the using ipywidgets, so we can explore the surface\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GNHilZz2bvKq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "#import seaborn as sns\n",
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "59MhAcKZIKDd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from mpl_toolkits import mplot3d\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uu4ZE-wsOgo4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x = np.outer(np.linspace(-10, 10, 1000), np.ones(1000))\n",
        "y = np.outer(np.ones(1000), np.linspace(-5, 15, 1000))\n",
        "#y = x.copy().T # transpose\n",
        "z = x ** 3 - 6*x**2 + 12*x + y ** 3 + 9*y**2 + 27*y + 19"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e4bjtMVrOjvo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def rot_plot(a,b):\n",
        "    # Now let us take a look how the model is doing:\n",
        "    fig = plt.figure(figsize=plt.figaspect(.5))\n",
        "    fig = plt.figure(figsize=(12,12))\n",
        "    ax = plt.axes(projection='3d')\n",
        "    ax.view_init(10, 50)\n",
        "\n",
        "    sc = ax.plot_surface(x, y, z,cmap='viridis', edgecolor='none')\n",
        "    ax.set_title('$f(x,y)=𝑥^3−6𝑥^2+12𝑥+𝑦^3+9𝑦^2+27𝑦+19$')\n",
        "    ax.set_xlabel(\"X\")\n",
        "    ax.set_ylabel(\"Y\")\n",
        "    ax.set_zlabel(\"Z\")\n",
        "    #ax.set_zlim([-2000,2000])\n",
        "    ax.view_init(a, b)\n",
        "    plt.colorbar(sc, aspect = 3)\n",
        "\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OQV1LEIuOmFD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 798,
          "referenced_widgets": [
            "a2d9338fb6304573b47ae72e50e19d45",
            "156051b82e4d4bed8b2ae3b0bbce82fe",
            "6371809a7ea743c18ed7444407ba613b",
            "2179a06436484edd9135c211c2ee6076",
            "d217a88d379a406d937f2485cad923bc",
            "9d071b871bbd4906a421b1bc83008de1",
            "03408fd19a4a4592a57fd4106190b6d8",
            "3dbc3e61925748a883488a878dfef274",
            "27d2119e678d4a44aa8f02dfce328fe7"
          ]
        },
        "outputId": "91c8fdb1-b115-4632-f2a7-774f8edb4760"
      },
      "source": [
        "%pylab inline\n",
        "import ipywidgets\n",
        "\n",
        "widget = ipywidgets\n",
        "widget.interact(rot_plot,\n",
        "                 a=widget.IntSlider(min=-180, max=180,description='angle1', step=10, value = 20),\n",
        "                 b=widget.IntSlider(min=-180, max=180,description='angle2', step=10, value = 50))"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Populating the interactive namespace from numpy and matplotlib\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a2d9338fb6304573b47ae72e50e19d45",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "interactive(children=(IntSlider(value=20, description='angle1', max=180, min=-180, step=10), IntSlider(value=5…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.rot_plot>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "js0nku6e-mT8",
        "colab_type": "text"
      },
      "source": [
        "#### <font color=blue> **Exercise 10**: </font>  $$f(x,y) = x^3 - 6x^2 + 12x + y^3 + 9y^2 + 27y +19$$  \n",
        "\n",
        "- Write the gradient of the funxtion\n",
        "- Implement gradient descent algorithm to find at least one minimum value of this fucntion"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "ebca3b76-e671-4b02-837b-f63f177321b4",
        "id": "jMFjrilIPag1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "X = np.ones(2)\n",
        "alpha = 0.01\n",
        "grad = np.array([X[0]*X[0]*X[0] - 6*X[0]*X[0] + 12*X[0], X[1]*X[1]*X[1] + 9*X[1]*X[1] + 27*X[1] + 19])\n",
        "print(grad)\n",
        "for i in range(4000):\n",
        "    grad = np.array([X[0]*X[0]*X[0] - 6*X[0]*X[0] + 12*X[0], X[1]*X[1]*X[1] + 9*X[1]*X[1] + 27*X[1] + 19])\n",
        "    X = X - alpha*grad\n",
        "    if (i%1000 == 0):\n",
        "        print(\"Aproximate Solution at iteration {} is {}\".format(i, X))\n",
        "print(\"after {} iteratios the approxiamte solution is {}\".format(i,X))"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 7. 56.]\n",
            "Aproximate Solution at iteration 0 is [0.93 0.44]\n",
            "Aproximate Solution at iteration 1000 is [ 5.2519143e-56 -1.0000000e+00]\n",
            "Aproximate Solution at iteration 2000 is [ 1.5958416e-111 -1.0000000e+000]\n",
            "Aproximate Solution at iteration 3000 is [ 4.84910883e-167 -1.00000000e+000]\n",
            "after 3999 iteratios the approxiamte solution is [ 1.6743699e-222 -1.0000000e+000]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}